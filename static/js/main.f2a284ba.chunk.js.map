{"version":3,"sources":["logo.svg","state/index.js","state/localStorage.js","SplineGraph.js","ColorInput.js","EditorView.js","GridView.js","ExportView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Shade","types","model","h","optional","number","s","l","extend","self","views","format","rgb","hsl","formatHex","value","r","g","b","actions","setHex","v","newValue","Color","name","string","base","boolean","start","end","hueSpline","array","saturationSpline","lightnessSpline","getYAtX","position","bezier","curve","Bezier","line","p1","x","y","p2","get","intersects","Array","$treenode","root","storedValue","interpolationCount","fill","map","el","i","create","hueBezier","saturationBezier","lightnessBezier","interpolations","remove","getParent","removeColor","Message","body","date","Date","toISOString","status","visible","afterCreate","setTimeout","dismiss","UIStore","isFooterOpen","isGraphVisible","isValueVisible","exportLanguage","messages","colorspace","tab","filter","m","addMessage","options","push","toggleGraphs","toggleValues","toggleFooter","setColorspace","setExportLanguage","setTab","defaultState","colors","ui","RootStore","find","color","formatter","prefix","separator","showSemicolon","camelCase","kebabCase","shades","shade","console","log","join","addColor","item","splice","indexOf","resetStore","applySnapshot","loadState","snapshot","persisitedState","serializedState","localStorage","getItem","JSON","parse","store","window","__store__","addEventListener","e","state","stringify","setItem","err","saveState","getSnapshot","STATE","selectedNode","svgBounds","scaleX","scaleY","Styles","styled","div","isMouseDown","SplineGraph","observer","spline","onSplineUpdate","max","min","width","height","onStartUpdate","onEndUpdate","hue","svgRef","useRef","handleMouseDown","index","button","handleMouseMove","handleMouseEnd","clientX","clientY","current","getBoundingClientRect","scaleLinear","domain","range","clamp","mouse","newSpline","length","removeEventListener","graphScaleY","scaledS","className","viewBox","ref","d","x1","y1","x2","y2","cx","cy","onMouseDown","label","ColorInput","props","style","baseColor","type","App","checked","onChange","applyPatch","op","path","target","onInput","onClick","title","arr","isExtreme","RootElement","hex","class","ExportView","outputEl","select","document","execCommand","exportText","toLowerCase","EditorView","GridView","parseInt","visibleMessages","message","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2a284ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import { types, getSnapshot, applySnapshot, getParent } from \"mobx-state-tree\"\nimport BezierEasing from 'bezier-easing'\nimport {scaleLinear} from \"d3-scale\";\nimport {format} from 'd3-format'\nimport {hsl, rgb} from 'd3-color'\nimport Bezier from 'bezier-js'\nimport {loadState, saveState} from './localStorage'\nimport {kebabCase, camelCase} from 'lodash'\n\nconst Shade = types.model('Shade', {\n  h: types.optional(types.number, 0),\n  s: types.optional(types.number, 100),\n  l: types.optional(types.number, 100),\n}).extend(self => {\n  return {\n    views: {\n      get hsl () {\n        return `hsl(${format('.2f')(self.h)}, ${format('.2f')(self.s)}%, ${format('.2f')(self.l)}%)`\n      },\n      get hex () {\n        return rgb(self.hsl).formatHex()\n      },\n      get rgb () {\n        const value = rgb(self.hsl)\n        return `rgb(${format('.2f')(value.r)}, ${format('.2f')(value.g)}, ${format('.2f')(value.b)})`\n      }\n    },\n    actions: {\n      setHex(v) {\n        const newValue = hsl(v)\n        self.h = newValue.h || 0\n        self.s = newValue.s * 100\n        self.l = newValue.l * 100\n      }\n    }\n  }\n})\n\nconst Color = types.model('Color', {\n  name: types.optional(types.string, 'Gray'),\n  base: types.optional(types.boolean, false),\n  start: types.optional(Shade, {h: 78, s: 60, l: 90}),\n  end: types.optional(Shade, {h: 174, s: 60, l: 12}),\n  hueSpline: types.optional(\n    types.array(types.number),\n    [0.33, 150, 0.66, 170]\n  ),\n  saturationSpline: types.optional(\n    types.array(types.number),\n    [0.5, 80, 0.8, 80]\n  ),\n  lightnessSpline: types.optional(\n    types.array(types.number),\n    [0.33, 66, 0.66, 33]\n  ),\n}).extend(self => {\n  return {\n    views: {\n      get hueBezier () {\n        return [\n          0, self.start.h,\n          self.hueSpline[0], self.hueSpline[1],\n          self.hueSpline[2], self.hueSpline[3],\n          1, self.end.h,\n        ]\n      },\n      get saturationBezier () {\n        return [\n          0, self.start.s,\n          self.saturationSpline[0], self.saturationSpline[1],\n          self.saturationSpline[2], self.saturationSpline[3],\n          1, self.end.s,\n        ]\n      },\n      get lightnessBezier () {\n        return [\n          0, self.start.l,\n          self.lightnessSpline[0], self.lightnessSpline[1],\n          self.lightnessSpline[2], self.lightnessSpline[3],\n          1, self.end.l,\n        ]\n      },\n      get interpolations () {\n        const getYAtX = (position, bezier) => {\n          var curve = new Bezier(...bezier);\n          var line = { p1: { x: position, y: -1000 }, p2: { x: position, y: 1000 } };\n          const intersect = curve.get(curve.intersects(line)[0])\n          return intersect.y\n        }\n\n        return Array(self.$treenode.root.storedValue.interpolationCount - 2).fill().map((el, i) => {\n          const position = (i + 1) / (self.$treenode.root.storedValue.interpolationCount - 1)\n          return Shade.create({\n            h: getYAtX(position, self.hueBezier),\n            s: getYAtX(position, self.saturationBezier),\n            l: getYAtX(position, self.lightnessBezier)\n          })\n        })\n      },\n      get shades () {\n        return [\n          self.start,\n          ...self.interpolations,\n          self.end\n        ]\n      },\n    },\n    actions: {\n      remove() {\n        getParent(self, 2).removeColor(self)\n      }\n    }\n  }\n})\n\nexport const Message = types.model(\"Message\", {\n  body: types.optional(types.string, ''),\n  date: types.optional(types.string, new Date().toISOString()),\n  status: types.optional(types.string, 'secondary'),\n  visible: types.optional(types.boolean, true),\n}).actions(self => ({\n  afterCreate() {\n    setTimeout(() => {\n      self.dismiss()\n    }, 5000)\n  },\n  dismiss() {\n    self.visible = false\n  },\n}))\n\nexport const UIStore = types.model(\"UIStore\", {\n  isFooterOpen: types.optional(types.boolean, false),\n  isGraphVisible: types.optional(types.boolean, true),\n  isValueVisible: types.optional(types.boolean, true),\n  exportLanguage: types.optional(types.string, 'css'),\n  messages: types.array(Message),\n  colorspace: types.optional(types.string, 'hsl'),\n  tab: types.optional(types.string, 'editor'),\n}).extend(self => {\n  return {\n    views: {\n      get visibleMessages() {\n        return self.messages.filter(m => m.visible)\n      }\n    },\n    actions: {\n      addMessage(options) {\n        self.messages.push(options || {})\n      },\n      toggleGraphs(options) {\n        self.isGraphVisible = !self.isGraphVisible;\n      },\n      toggleValues(options) {\n        self.isValueVisible = !self.isValueVisible;\n      },\n      toggleFooter(options) {\n        self.isFooterOpen = !self.isFooterOpen;\n      },\n      setColorspace(value) {\n        self.colorspace = value;\n      },\n      setExportLanguage(value) {\n        self.exportLanguage = value;\n      },\n      setTab(value) {\n        self.tab = value;\n      },\n    }\n  }\n})\n\nconst defaultState = {\n  colors: [Color.create({\n  })],\n  ui: {}\n}\n\nexport const RootStore = types.model(\"Store\", {\n  colors: types.array(Color),\n  interpolationCount: types.optional(types.number, 10),\n  ui: types.optional(UIStore, {}),\n}).extend(self => {\n  return {\n    views: {\n      get baseColor() {\n        return self.colors.find(color => color.base)\n      },\n      get exportText () {\n        let\n          formatter,\n          colorspace,\n          keyFormat,\n          prefix,\n          separator,\n          showSemicolon = true;\n        switch(self.ui.exportLanguage) {\n          case 'sass':\n            formatter = camelCase\n            prefix = '$'\n            separator = ':'\n            showSemicolon = false\n            break;\n          case 'csv':\n            formatter = v => v\n            prefix = ''\n            separator = ':'\n            showSemicolon = false\n            break;\n          case 'css':\n          default:\n            formatter = kebabCase\n            prefix = '--'\n            separator = ':'\n            break;\n        }\n        return self.colors.map(color => {\n          return color.shades.map((shade, i) => {\n            const name = formatter(`${color.name} ${i + 1}`)\n            const value = shade[self.ui.colorspace]\n            console.log({value})\n\n            return `${prefix}${name}${separator} ${value}${showSemicolon ? ';' : ''}`\n          }).join('\\n')\n        }).join('\\n\\n')\n      }\n    },\n    actions: {\n      addColor(options) {\n        self.colors.push(options || {})\n      },\n      removeColor (item) {\n        self.colors.splice(self.colors.indexOf(item), 1)\n      },\n      resetStore() {\n        applySnapshot(self, defaultState)\n      },\n      loadState(snapshot) {\n        applySnapshot(self, snapshot)\n      },\n    }\n  }\n})\n\n// initialization and unload\n\nconst persisitedState = loadState();\n\nlet store = RootStore.create(persisitedState || defaultState)\nwindow.__store__ = store\n\nwindow.addEventListener('beforeunload', function (e) {\n  // console.log('beforeunload')\n  // e.preventDefault()\n  // e.returnValue = '';\n  // console.log(JSON.parse(JSON.stringify(store)))\n  saveState(getSnapshot(store));\n});\n\nwindow.STATE = store\n\nexport default store;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('dialoguerobatic__state')\n    if (serializedState === null) {\n      return undefined\n    } else {\n      return JSON.parse(serializedState)\n    }\n  } catch {\n    return undefined\n  }\n}\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('dialoguerobatic__state', serializedState)\n  } catch (err) {\n    console.log({err})\n  }\n}\n","import React, {useRef} from 'react';\nimport logo from './logo.svg';\nimport { observer } from 'mobx-react';\nimport state from './state'\nimport styled from 'styled-components'\nimport {\n  line, curveBundle,\n} from 'd3-shape'\nimport {scaleLinear} from \"d3-scale\";\n\nconst Styles = styled.div`\nposition: relative;\n.rainbow {\n  width: calc(100% + 0.4rem);\n  margin-left: -0.2rem;\n  height: 100%;\n  position: absolute;\n  border-radius: 4px;\n  z-index: -1;\n  background: linear-gradient(to bottom,\n    hsl(720, 100%, 30%),\n    hsl(680, 100%, 30%),\n    hsl(640, 100%, 30%),\n    hsl(600, 100%, 30%),\n    hsl(560, 100%, 30%),\n    hsl(520, 100%, 30%),\n    hsl(480, 100%, 30%),\n    hsl(440, 100%, 30%),\n    hsl(400, 100%, 30%),\n    hsl(360, 100%, 30%),\n    hsl(320, 100%, 30%),\n    hsl(280, 100%, 30%),\n    hsl(240, 100%, 30%),\n    hsl(200, 100%, 30%),\n    hsl(160, 100%, 30%),\n    hsl(120, 100%, 30%),\n    hsl(80,  100%, 30%),\n    hsl(40,  100%, 30%),\n    hsl(0,   100%, 30%)\n  );\n}\n.splineGraph {\n  overflow: visible;\n  width: 8rem;\n  height: 100%;\n  vector-effect: non-scaling-stroke;\n  background: var(--gray-10);\n  border-radius: 4px;\n  box-shadow:\n    0 0 0 1px var(--gray-9),\n    var(--box-shadow);\n\n  path, line, circle {\n    stroke-width: 1px;\n    fill: none;\n    vector-effect: non-scaling-stroke;\n    mix-blend-mode: lighten;\n    stroke-linecap: round;\n  }\n  line {\n    stroke: var(--gray-5)\n  }\n  path {\n    stroke: var(--gray-2)\n  }\n  .point {\n    fill: transparent;\n    stroke-width: 2px;\n\n    &--oncurve {\n      stroke: var(--gray-2);\n      fill: var(--gray-9);\n    }\n    &--offcurve {\n      stroke: var(--gray-6);\n    }\n  }\n}\n`\n\nlet isMouseDown = false;\nlet initialMouse, initial, selectedNode, svgBounds, scaleX, scaleY;\n\nconst SplineGraph = observer(({\n  spline,\n  color,\n  onSplineUpdate,\n  max,\n  min,\n  width,\n  height = 1,\n  onStartUpdate,\n  onEndUpdate,\n  hue\n}) => {\n  const svgRef = useRef(null)\n\n  const handleMouseDown = (e, index) => {\n    // right click\n    if (e.button === 2) return\n\n    isMouseDown = true\n    selectedNode = index\n    window.addEventListener('mousemove', handleMouseMove)\n    window.addEventListener('mouseup', handleMouseEnd)\n    window.addEventListener('mouseleave', handleMouseEnd)\n\n    initialMouse = {x: e.clientX, y: e.clientY}\n    svgBounds = svgRef.current.getBoundingClientRect()\n    scaleX = scaleLinear()\n      .domain([svgBounds.x, svgBounds.x + svgBounds.width])\n      .range([0, 1])\n      .clamp(true)\n    scaleY = scaleLinear()\n      .domain([svgBounds.y, svgBounds.y + svgBounds.height])\n      .range([max, min])\n      .clamp(true)\n  }\n  const handleMouseMove = (e) => {\n    if (isMouseDown) {\n      const mouse = {x: e.clientX, y: e.clientY}\n      let newSpline = [...spline].splice(2, spline.length - 2)\n\n      switch (selectedNode) {\n        case 'start-oncurve':\n          onStartUpdate(scaleY(mouse.y))\n          break;\n        case 'start':\n          newSpline[0] = scaleX(mouse.x)\n          newSpline[1] = scaleY(mouse.y)\n          onSplineUpdate(newSpline)\n          break;\n        case 'end-oncurve':\n          onEndUpdate(scaleY(mouse.y))\n          break;\n        case 'end':\n          newSpline[2] = scaleX(mouse.x)\n          newSpline[3] = scaleY(mouse.y)\n          onSplineUpdate(newSpline)\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  const handleMouseEnd = (e) => {\n    isMouseDown = false\n    window.removeEventListener('mousemove', handleMouseMove)\n    window.removeEventListener('mouseup', handleMouseEnd)\n    window.removeEventListener('mouseleave', handleMouseEnd)\n  }\n\n  const graphScaleY = scaleLinear()\n    .domain([min, max])\n    .range([height, 0])\n\n  const scaledS = spline.map((el, i) => (\n    i % 2 === 0\n      ? el\n      : graphScaleY(el)\n  ))\n\n  return (\n    <Styles className=\"SplineGraph\" height={height}>\n      {hue && <div className=\"rainbow\" />}\n      <svg className=\"splineGraph\" viewBox={`0 0 1 ${height}`} ref={svgRef}>\n        <path d={`\n        M ${scaledS[0]}, ${scaledS[1]}\n        C ${scaledS[2]}, ${scaledS[3]}\n          ${scaledS[4]}, ${scaledS[5]}\n          ${scaledS[6]}, ${scaledS[7]}\n        `}\n        />\n        <line x1={scaledS[0]} y1={scaledS[1]} x2={scaledS[2]} y2={scaledS[3]} />\n        <circle className=\"point point--oncurve\" cx={scaledS[0]} cy={scaledS[1]} r=\"0.075\"\n          onMouseDown={(e) => {handleMouseDown(e, 'start-oncurve')}}\n        />\n        <circle className=\"point point--offcurve\" cx={scaledS[2]} cy={scaledS[3]} r=\"0.075\"\n          onMouseDown={(e) => {handleMouseDown(e, 'start')}}\n        />\n\n        <line x1={scaledS[4]} y1={scaledS[5]} x2={scaledS[6]} y2={scaledS[7]} />\n        <circle className=\"point point--oncurve\" cx={scaledS[6]} cy={scaledS[7]} r=\"0.075\"\n          onMouseDown={(e) => {handleMouseDown(e, 'end-oncurve')}}\n        />\n        <circle className=\"point point--offcurve\" cx={scaledS[4]} cy={scaledS[5]} r=\"0.075\"\n          onMouseDown={(e) => {handleMouseDown(e, 'end')}}\n        />\n      </svg>\n    </Styles>\n  );\n})\n\nexport default SplineGraph;\n","import React, {useRef} from 'react';\nimport logo from './logo.svg';\nimport { observer } from 'mobx-react';\nimport state from './state'\nimport styled from 'styled-components'\nimport {\n  line, curveBundle,\n} from 'd3-shape'\nimport {scaleLinear} from \"d3-scale\";\n\nconst Styles = styled.label`\ncursor: pointer;\n\ninput {\n  position: absolute;\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n`\n\nconst ColorInput = observer((props) => {\n  return (\n    <Styles className=\"ColorInput\">\n      <div className=\"swatch\" style={{\"--color\": props.value, \"--base-color\": props.baseColor}} />\n      <input\n        type=\"color\"\n        {...props}\n      />\n    </Styles>\n  );\n})\n\nexport default ColorInput;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { observer } from 'mobx-react';\nimport state from './state'\nimport styled from 'styled-components'\nimport {\n  line, curveBasis\n} from 'd3-shape'\nimport SplineGraph from './SplineGraph'\nimport { applyPatch } from 'mobx-state-tree';\nimport ColorInput from './ColorInput'\n\nconst Styles = styled.div`\ndisplay: flex;\nheight: 100%;\nflex-flow: column;\noverflow: auto;\n.graphs {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-areas:\n    \"4rem 4rem\"\n    \"4rem 4rem\";\n  padding: 1rem 0;\n  background: linear-gradient(to bottom, var(--body-background) 90%, #27263700 100%);\n}\n.graph {\n  position: relative;\n  display: flex;\n  justify-content: space-between\n}\n.graph-hue {\n  grid-row: 1 / 3;\n}\n.graph-lightness, .graph-saturation {\n  h3 { top: auto; bottom: 0.5rem; }\n}\nh3 {\n  position: absolute;\n  pointer-events: none;\n  opacity: 0.3;\n  margin: 0;\n  top: 0.5rem;\n  left: 0.5rem;\n  z-index: 1;\n  abbr {\n    text-decoration: none;\n  }\n}\n.colors {\n  display: flex;\n  flex: 1 1 auto;\n  padding: 0 2rem 2rem;\n}\n.color {\n  padding: 1rem 0 0;\n  width: 17rem;\n  flex: 0 0 auto;\n  text-overflow: ellipsis;\n  & + .color {\n    margin-left: 2rem;\n  }\n  &.values-hidden {\n    width: 128px;\n  }\n}\n.title{\n  display: flex;\n  align-items: center;\n  margin: 0;\n  input[type=text] {\n    all: unset;\n    width: 100%;\n    margin-left: 0.5rem;\n  }\n  .checkbox {\n    cursor: pointer;\n    input {\n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n    }\n    .viz {\n      width: 1rem;\n      height: 1rem;\n      border: 2px solid var(--gray-7);\n      border-radius: 1rem;\n    }\n    input:checked + .viz {\n      border-color: var(--red-4);\n      background: var(--gray-7);\n    }\n  }\n}\n.shade {\n  position: relative;\n  display: flex;\n  text-align: left;\n  white-space: nowrap;\n  align-items: center;\n  border-radius: 4px;\n  & + .shade {\n    margin-top: 1rem;\n  }\n\n  &:first-child, &:last-child {\n    cursor: pointer;\n    &::before {\n      content: \"\";\n      position: absolute;\n      display: block;\n      top: -0.5rem;\n      right: -1rem;\n      bottom: -0.5rem;\n      left: -1rem;\n      border-radius: 4px;\n      background: var(--gray-8);\n      opacity: 0;\n      z-index: -1;\n    }\n    &:hover {\n      &::before {\n        opacity: 1;\n      }\n    }\n  }\n}\n.shade-title {\n  margin: 0;\n}\n.shade-value {\n  margin: 0;\n}\n.swatch {\n  width: 2rem;\n  height: 2rem;\n  border-radius: 1rem;\n  background: var(--color);\n  margin-right: 1rem;\n  flex: 0 0 auto;\n  box-shadow:\n    0 0 0 3px inset var(--base-color),\n    var(--box-shadow);\n}\n.add-button-container {\n  flex: 0 0 auto;\n  width: 256px;\n  margin: 1rem;\n}\n.add-button {\n  width: 100%;\n  font: inherit;\n  font-size: 2rem;\n  font-weight: 700;\n  position: sticky;\n  top: 1rem;\n}\n.remove-button {\n  width: 3rem;\n  line-height: 0.5;\n  z-index: 11;\n}\n`\n\nconst App = observer(() => {\n  return (\n    <Styles className=\"Editor\">\n      <div className=\"colors\">\n        {state.colors.map(color => (\n          <div className=\"color\">\n            <h2 className=\"title\">\n              <label className=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"base-radio\"\n                  checked={color.base}\n                  onChange={(e)=> {applyPatch(color, {op: 'add', path: './base', value: e.target.checked})}}\n                />\n                <div className=\"viz\" />\n              </label>\n              <input\n                type=\"text\"\n                value={color.name}\n                onInput={(e)=> {applyPatch(color, {op: 'add', path: './name', value: e.target.value})}}\n              />\n              <button\n                className=\"remove-button\"\n                onClick={(e) => color.remove()}\n              >-</button>\n            </h2>\n            {state.ui.isGraphVisible && (\n              <div className=\"graphs\">\n                <div className=\"graph graph-hue\">\n                  <h3><abbr title=\"Hue\">H</abbr></h3>\n                  <SplineGraph\n                    hue\n                    color={color}\n                    min={0}\n                    max={720}\n                    height={2.25}\n                    spline={color.hueBezier}\n                    onStartUpdate={(v) => {applyPatch(color, {op: 'add', path: './start/h', value: v})}}\n                    onEndUpdate={(v) => {applyPatch(color, {op: 'add', path: './end/h', value: v})}}\n                    onSplineUpdate={(v)=> {applyPatch(color, {op: 'add', path: './hueSpline', value: v})}}\n                  />\n                </div>\n                <div className=\"graph graph-saturation\">\n                  <h3><abbr title=\"Saturation\">S</abbr></h3>\n                  <SplineGraph\n                    color={color}\n                    min={0}\n                    max={100}\n                    spline={color.saturationBezier}\n                    onStartUpdate={(v) => {applyPatch(color, {op: 'add', path: './start/s', value: v})}}\n                    onEndUpdate={(v) => {applyPatch(color, {op: 'add', path: './end/s', value: v})}}\n                    onSplineUpdate={(v)=> {applyPatch(color, {op: 'add', path: './saturationSpline', value: v})}}\n                  />\n                </div>\n                <div className=\"graph graph-lightness\">\n                  <h3><abbr title=\"Lightness\">L</abbr></h3>\n                  <SplineGraph\n                    color={color}\n                    min={0}\n                    max={100}\n                    spline={color.lightnessBezier}\n                    onStartUpdate={(v) => {applyPatch(color, {op: 'add', path: './start/l', value: v})}}\n                    onEndUpdate={(v) => {applyPatch(color, {op: 'add', path: './end/l', value: v})}}\n                    onSplineUpdate={(v)=> {applyPatch(color, {op: 'add', path: './lightnessSpline', value: v})}}\n                  />\n                </div>\n              </div>\n            )}\n            <div>\n              {color.shades.map((shade, i, arr) => {\n                const isExtreme = i === 0 || i === arr.length - 1\n                const RootElement = isExtreme ? 'label' : 'div'\n\n                return (\n                  <RootElement className={`shade`} style={{\"--color\": shade.hsl}} >\n                    {isExtreme ?\n                      <ColorInput\n                        type=\"color\"\n                        value={i === 0 ? color.start.hex : color.end.hex}\n                        baseColor={state.baseColor && state.baseColor.shades[i].hsl}\n                        onInput={(e) => color[i === 0 ? 'start' : 'end'].setHex(e.target.value)}\n                      />\n                    :\n                      <div\n                        className=\"swatch\"\n                        style={{\"--base-color\": state.baseColor && state.baseColor.shades[i].hsl}}\n                      />\n                    }\n                    <div>\n                      <h4 className=\"shade-title\">{color.name} {i + 1}</h4>\n                      {state.ui.isValueVisible &&\n                        <p className=\"shade-value\">{shade.hsl}</p>\n                      }\n                    </div>\n                  </RootElement>\n                )\n              })}\n            </div>\n          </div>\n        ))}\n\n        <div className=\"add-button-container\">\n          <button class=\"add-button\" onClick={() => {state.addColor()}}>+ Add Color</button>\n        </div>\n      </div>\n    </Styles>\n  );\n})\n\nexport default App;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { observer } from 'mobx-react';\nimport state from './state'\nimport styled from 'styled-components'\nimport {\n  line, curveBasis\n} from 'd3-shape'\nimport SplineGraph from './SplineGraph'\nimport { applyPatch } from 'mobx-state-tree';\nimport ColorInput from './ColorInput'\n\nconst Styles = styled.div`\ndisplay: flex;\nheight: 100%;\nflex-flow: column;\npadding: 1rem 1rem 4rem;\noverflow: auto;\n.colors {\n  display: flex;\n  flex: 1 1 auto;\n  padding-top: 6rem;\n}\n.color {\n  position: relative;\n  scroll-snap-align: start;\n  flex: 0 0 auto;\n  & + .color {\n    margin-left: 1rem;\n  }\n}\n.title{\n  display: flex;\n  align-items: center;\n  margin: 0 0 1rem;\n  input[type=text] {\n    all: unset;\n    width: 100%;\n    margin-left: 0.5rem;\n  }\n  .checkbox {\n    cursor: pointer;\n    input {\n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n    }\n    .viz {\n      width: 1rem;\n      height: 1rem;\n      border: 2px solid var(--gray-8);\n      border-radius: 1rem;\n    }\n    input:checked + .viz {\n      border-color: var(--gray-2);\n    }\n  }\n}\n.shade {\n  position: relative;\n  display: flex;\n  text-align: left;\n  white-space: nowrap;\n  align-items: center;\n  border-radius: 4px;\n  & + .shade {\n    margin-top: 1rem;\n  }\n}\n.row-labels {\n  padding-right: 1rem;\n}\n.row-label {\n  width: 3rem;\n  display: block;\n  line-height: 2rem;\n  margin-bottom: 1rem;\n  text-align: right;\n}\n.column-label {\n  position: absolute;\n  bottom: 100%;\n  right: 0;\n  transform: translate(-1rem, -1rem) rotate(45deg);\n  transform-origin: bottom right;\n}\n`\n\nconst App = observer(() => {\n  return (\n    <Styles className=\"GridView\">\n      <div className=\"colors\">\n        <div className=\"row-labels\">\n          {state.colors[0].shades.map((color, i) => (\n            <div className=\"row-label\">{i}</div>\n          ))}\n        </div>\n        {state.colors.map(color => (\n          <div className=\"color\">\n            <div className=\"column-label\">{color.name}</div>\n            {color.shades.map((shade, i, arr) => (\n              <div className={`shade`} style={{\"--color\": shade.hsl}} >\n                <div\n                  className=\"swatch\"\n                  style={{\"--base-color\": state.baseColor && state.baseColor.shades[i].hsl}}\n                />\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Styles>\n  );\n})\n\nexport default App;\n","import React, {useRef} from 'react';\nimport { observer } from 'mobx-react';\nimport state from './state'\nimport styled from 'styled-components'\nconst Styles = styled.div`\n  height: 100%;\n  padding-bottom: 3rem;\n  flex: 1 1 auto;\n  overflow: auto;\n  user-select: text;\n  padding: 2rem;\n\n  .tabs {\n    display: flex;\n    height: 3rem;\n    border-bottom: 1px solid var(--gray-8);\n  }\n  .tab-item {\n    line-height: 3rem;\n    font-size: var(--size-1);\n    padding: 0 0.5rem;\n    font-weight: 700;\n    &.inactive {\n      color: var(--gray-5);\n    }\n    &.active {\n      border-bottom: 0.15em solid var(--gray-1);\n    }\n    input {\n      opacity: 0;\n      position: absolute;\n      width: 0;\n      height: 0;\n    }\n  }\n  .swatch {\n    width: 2rem;\n    height: 2rem;\n    border-radius: 1rem;\n    background: var(--color);\n    flex: 0 0 auto;\n    box-shadow:\n      0 0 0 3px inset var(--base-color),\n      0 0 8px var(--gray-10);\n  }\n  textarea {\n    width: 0;\n    height: 0;\n    opacity: 0;\n    position: absolute;\n    pointer-events: none;\n  }\n  .options {\n    margin-bottom: 1rem;\n  }\n`\n\nconst ExportView = observer(() => {\n  const outputEl = useRef(null);\n  return (\n    <Styles className=\"ExportView\">\n      <div className=\"options\">\n        <select onChange={e => state.ui.setExportLanguage(e.target.value)} value={state.ui.exportLanguage}>\n          {[\"css\", \"sass\", \"csv\"].map(el => (\n            <option value={el}>{el}</option>\n            ))}\n        </select>\n        <select onChange={e => state.ui.setColorspace(e.target.value)} value={state.ui.colorspace}>\n          {[\"hex\", \"rgb\", \"hsl\",].map(el => (\n            <option value={el}>{el}</option>\n          ))}\n        </select>\n      </div>\n\n      <button onClick={() => {\n        outputEl.current.select()\n        document.execCommand('copy')\n        state.ui.addMessage({\n          body: 'Copied to clipboard',\n          status: 'success'\n        })\n      }}>Copy to clipboard</button>\n      <textarea ref={outputEl}>{state.exportText}</textarea>\n      <pre>\n        {state.exportText}\n      </pre>\n    </Styles>\n  );\n})\n\nexport default ExportView;\n","import React from 'react';\nimport './App.css';\nimport { observer } from 'mobx-react';\nimport state from './state'\nimport styled from 'styled-components'\nimport { applyPatch } from 'mobx-state-tree';\nimport EditorView from './EditorView'\nimport GridView from './GridView'\nimport ExportView from './ExportView'\nconst Styles = styled.div`\ndisplay: flex;\nheight: 100%;\nflex-flow: column;\npadding-bottom: 3rem;\n\n.tabs {\n  display: flex;\n  height: 3rem;\n  padding: 0 2rem;\n  border-bottom: 1px solid var(--gray-6);\n  box-shadow: var(--box-shadow);\n  z-index: 100;\n}\n.tab-item {\n  line-height: 3rem;\n  font-size: var(--size-1);\n  padding: 0 0.5rem;\n  font-weight: 700;\n  &.inactive {\n    color: var(--gray-3);\n  }\n  &.active {\n    border-bottom: 0.15em solid var(--gray-1);\n  }\n  &:active {\n    background: var(--gray-7);\n  }\n  input {\n    opacity: 0;\n    position: absolute;\n    width: 0;\n    height: 0;\n  }\n}\n.swatch {\n  width: 2rem;\n  height: 2rem;\n  border-radius: 1rem;\n  background: var(--color);\n  flex: 0 0 auto;\n  box-shadow:\n    0 0 0 3px inset var(--base-color),\n    var(--box-shadow);\n}\n.app-footer {\n  border-top: 1px solid var(--gray-8);\n  padding: 1rem;\n  position: absolute;\n  display: flex;\n  align-items: center;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 4rem;\n  padding: 0 2rem;\n  background: var(--gray-8);\n  z-index: 1;\n  transition: 0.3s var(--ease-out) height;\n  box-shadow: 0 -2px 8px var(--gray-10);\n  & > * + * {\n    margin-left: 1rem;\n  }\n}\n.shade-count {\n  width: 3rem;\n}\n.messages {\n  margin-left: auto;\n}\n.message {\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px var(--gray-10);\n\n  &.success {\n    background: var(--green-8);\n    color: var(--green-1);\n  }\n}\n\n`\n\nconst App = observer(() => {\n  return (\n    <Styles className=\"App\">\n      <div className=\"tabs\">\n        {['Editor', 'Grid', 'Export'].map(label => {\n          const value = label.toLowerCase()\n          return (\n            <label className={`tab-item ${state.ui.tab === value ? 'active' : 'inactive'}`}>\n              <input\n                type=\"radio\"\n                checked={state.ui.tab === value}\n                value={value}\n                onChange={e => { if (e.target.checked) {\n                  state.ui.setTab(e.target.value)\n                }}}\n              />\n              {label}\n            </label>\n          )\n        })}\n      </div>\n      {(() => {\n        switch (state.ui.tab) {\n          case 'editor': return <EditorView />\n          case 'grid': return <GridView />\n          case 'export': return <ExportView />\n          default: return <EditorView />\n        }\n      })()}\n      <footer className={`app-footer`}>\n        <label>\n          Number of Shades:\n          <input\n            className=\"shade-count\"\n            type=\"number\"\n            min=\"3\"\n            onChange={(e) => {\n              const value = parseInt(e.target.value)\n              if (value >= 3 && value <= 16) {\n                applyPatch(state, {op: 'add', path: './interpolationCount', value: value})\n              }\n            }}\n            value={state.interpolationCount}\n          />\n        </label>\n        <button onClick={() => {state.resetStore()}}>Reset All</button>\n        <div className=\"messages\">\n          {state.ui.visibleMessages.map(message => (\n            <div className={`message ${message.status}`}>{message.body}</div>\n          ))}\n        </div>\n      </footer>\n    </Styles>\n  );\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}